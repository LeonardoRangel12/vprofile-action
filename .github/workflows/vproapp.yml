name: vprofile deploy
on: workflow_dispatch
env:
    AWS_REGION: us-west-1
    ECR_REPOSITORY: vprofileapp
    EKS_CLUSTER: vprofile-eks

jobs:
    Testing:
        runs-on: ubuntu-latest
        steps:
            - name: Code checkout
              uses: actions/checkout@v4

            - name: Maven test
              run: mvn test

            - name: Checkstyle
              run: mvn checkstyle:checkstyle

            - name: Set Java 11
              uses: actions/setup-java@v3
              with:
                distribution: 'temurin'
                java-version: 11

            # Setup sonar-scanner
            - name: Set up SonarQube
              uses: warchant/setup-sonar-scanner@v7

            - name: SonarQube Scan
              run: sonar-scanner
                    -Dsonar.host.url=${{ secrets.SONAR_URL }}
                    -Dsonar.login=${{ secrets.SONAR_TOKEN }}
                    -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
                    -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
                    -Dsonar.sources=src/
                    -Dsonar.junit.reportsPath=target/surefire-reports/ 
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec 
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/  

            - name: SonarQube quality gate check
              id: sonarqube-quality-gate
              uses: sonarsource/sonarqube-quality-gate-action@master
              # Force timeout
              timeout-minutes: 5
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                SONAR_HOST: ${{ secrets.SONAR_URL }}
    BUILD_AND_PUBLISH:
        needs: Testing
        runs-on: ubuntu-latest
        steps:
            - name: Code checkout
              uses: actions/checkout@v4
            
            - name: Build & Upload image to ECR
              uses: appleboy/docker-ecr-action@master
              with:
                access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                registry: ${{ secrets.REGISTRY }}
                repo: ${{env.ECR_REPOSITORY}}
                tags: latest, ${{github.run_number}}
                region: ${{env.AWS_REGION}}
                daemon_off: false
                dockerfile: ./Dockerfile
                context: ./

    DEPLOY:
        needs: BUILD_AND_PUBLISH
        runs-on: ubuntu-latest
        steps:
            - name: Code checkout
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{env.AWS_REGION}}

            - name: Get Kube config file
              run: aws eks --region ${{env.AWS_REGION}} update-kubeconfig --name ${{env.EKS_CLUSTER}}

            - name: Print config file
              run: cat ~/.kube/config

            - name: Login to ECR in EKS
              run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password)

            - name: Deploy Heml
              uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{env.AWS_REGION}}
                cluster-name: ${{env.EKS_CLUSTER}}
                namespace: default
                chart-path: ./helm/vprofilecharts
                values: appimage=${{ secrets.REGISTRY }}/${{env.ECR_REPOSITORY}},apptag=${{github.run_number}}
                name: vprofile-stack